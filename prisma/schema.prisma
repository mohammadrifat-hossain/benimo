generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?     @unique
  password      String?
  image         String?
  emailVerified Boolean?
  verified      Boolean @default(false)
  createdAt     DateTime    @default(now())
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  followers     Follower[]
  following     Following[]
  account       Account[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  imageUrl  String?
  createdAt DateTime  @default(now())
  author    User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String    @db.ObjectId
  likes     Like[]
  comments  Comment[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
}

model Follower {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  followingUser  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String   @db.ObjectId
  followerUserId String   @db.ObjectId
}

model Following {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  followerUser   User     @relation(fields: [followerUserId], references: [id], onDelete: Cascade)
  followerUserId String   @db.ObjectId
  userId         String   @db.ObjectId
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderName String
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  text       String
  createdAt  DateTime @default(now())
}

model Otp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  expireAt  DateTime
  code      Int
}

model Notification {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String   @db.ObjectId
  createdAt    DateTime @default(now())
  notification String
  redirectUrl  String
  seen Boolean @default(false)
}
